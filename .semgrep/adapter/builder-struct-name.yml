rules:
  - id: builder-struct-name-check
    languages:
      - go
    message: >
      Scope of `$BUILDER` is limited to this adapter package. Therefore
      `$BUILDER` can be renamed to `adapter`. Refer following example.

      ```
        type adapter struct {
          endpoint string
        }
        func  Builder(bidderName openrtb_ext.BidderName, config config.Adapter, server config.Server) (adapters.Bidder, error) {
          return &adapter{endpoint: "https://www.foo.com"}, nil
        }
      ```
    severity: WARNING
    patterns:
      - pattern-either:
          - pattern-inside: >
              func Builder($BIDDER_NAME openrtb_ext.BidderName, $CONFIG config.Adapter, $SERVER config.Server) (adapters.Bidder, error) {
                ...
                $BUILDER_OBJ := &$BUILDER{...}
                ...
                return $BUILDER_OBJ, nil
              }
          - pattern-inside: >
              func Builder($BIDDER_NAME openrtb_ext.BidderName, $CONFIG config.Adapter, $SERVER config.Server) (adapters.Bidder, error) {
                ...
                $BUILDER_OBJ := $BUILDER{...}
                ...
                return &$BUILDER_OBJ, nil
              }
          - pattern-inside: >
              func Builder($BIDDER_NAME openrtb_ext.BidderName, $CONFIG config.Adapter, $SERVER config.Server) (adapters.Bidder, error) {
                ...
                $BUILDER_OBJ := $BUILDER{}
                ...
                return &$BUILDER_OBJ, nil
              }
          - pattern-inside: >
              func Builder($BIDDER_NAME openrtb_ext.BidderName, $CONFIG config.Adapter, $SERVER config.Server) (adapters.Bidder, error) {
                ...
                return &$BUILDER{...}, ...
              }
      - focus-metavariable: $BUILDER
      - metavariable-regex:
          metavariable: $BUILDER
          regex: (?!adapter$)
