// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	hookstage "github.com/prebid/prebid-server/v3/hooks/hookstage"
	mock "github.com/stretchr/testify/mock"
)

// ProcessedAuctionRequest is an autogenerated mock type for the ProcessedAuctionRequest type
type ProcessedAuctionRequest struct {
	mock.Mock
}

// HandleProcessedAuctionHook provides a mock function with given fields: _a0, _a1, _a2
func (_m *ProcessedAuctionRequest) HandleProcessedAuctionHook(_a0 context.Context, _a1 hookstage.ModuleInvocationContext, _a2 hookstage.ProcessedAuctionRequestPayload) (hookstage.HookResult[hookstage.ProcessedAuctionRequestPayload], error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for HandleProcessedAuctionHook")
	}

	var r0 hookstage.HookResult[hookstage.ProcessedAuctionRequestPayload]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, hookstage.ModuleInvocationContext, hookstage.ProcessedAuctionRequestPayload) (hookstage.HookResult[hookstage.ProcessedAuctionRequestPayload], error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, hookstage.ModuleInvocationContext, hookstage.ProcessedAuctionRequestPayload) hookstage.HookResult[hookstage.ProcessedAuctionRequestPayload]); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(hookstage.HookResult[hookstage.ProcessedAuctionRequestPayload])
	}

	if rf, ok := ret.Get(1).(func(context.Context, hookstage.ModuleInvocationContext, hookstage.ProcessedAuctionRequestPayload) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProcessedAuctionRequest creates a new instance of ProcessedAuctionRequest. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProcessedAuctionRequest(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProcessedAuctionRequest {
	mock := &ProcessedAuctionRequest{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
